package db

import (
	"time"

	"github.com/jmoiron/sqlx"
)

// MobileUser is any user who signs up onto the platform
// via the mobile app with a verified phone number
type MobileUser struct {
	ID          int       `db:"id" json:"id"`
	Msisdn      string    `db:"msisdn" json:"msisdn"`
	CreatedAt   time.Time `db:"created_at" json:"createdAt"`
	LastLoginAt time.Time `db:"last_login_at" json:"lastLoginAt"`
}

// MobileUsersRepo defines methods for interacting with mobile user
// records in the database
type MobileUsersRepo struct {
	db *sqlx.DB
}

// NewMobileUsersRepo returns a new mobile users repo
// for interacting with mobile users in the database
func NewMobileUsersRepo(db *sqlx.DB) *MobileUsersRepo {
	return &MobileUsersRepo{
		db: db,
	}
}

// Create saves a new mobile user value into the database, updates
// the value with the ID auto-generated by the database, and returns
// the mobile user value or error if the operation fails
func (repo *MobileUsersRepo) Create(user *MobileUser) (*MobileUser, error) {
	sql := "INSERT INTO mobile_users (msisdn) VALUES(?)"
	res, err := repo.db.Exec(sql, user.Msisdn)
	if err != nil {
		return nil, err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}

	user.ID = int(id)
	return user, nil
}

// GetAll returns records of all mobile users in the database,
// or an error if the operation fails
func (repo *MobileUsersRepo) GetAll() ([]*MobileUser, error) {
	sql := "SELECT * FROM mobile_users"
	var users []*MobileUser

	err := repo.db.Select(&users, sql)
	if err != nil {
		return nil, err
	}

	return users, nil
}
